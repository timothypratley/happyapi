{:paths ["src" "resources"]

 :deps  {org.clojure/clojure   {:mvn/version "1.11.3"}
         buddy/buddy-sign      {:mvn/version "3.5.351"}
         com.grzm/uri-template {:mvn/version "0.7.1"}
         ring/ring-core        {:mvn/version "1.12.2"}}

 :aliases
 {:provided {:extra-deps {ring/ring-jetty-adapter {:mvn/version "1.15.1" :scope "provided" :optional "true"}
                          clj-http/clj-http       {:mvn/version "3.13.0" :scope "provided" :optional "true"}
                          http-kit/http-kit       {:mvn/version "2.8.0" :scope "provided" :optional "true"}
                          cheshire/cheshire       {:mvn/version "5.13.0" :scope "provided" :optional "true"}
                          org.clojure/data.json   {:mvn/version "2.5.0" :scope "provided" :optional "true"}
                          metosin/jsonista        {:mvn/version "0.3.9" :scope "provided" :optional "true"}}}

  ;; REPL with `clojure -A:dev:test:build:doc`
  ;; GENERATE happyapi.google with `clojure -M:dev`
  :dev      {:extra-paths ["dev"]
             :main-opts   ["-m" "happyapi.gen.google.lion"]
             :extra-deps  {meander/epsilon         {:mvn/version "0.0.650"}
                           ring/ring               {:mvn/version "1.12.2"}
                           org.slf4j/slf4j-nop     {:mvn/version "2.0.13"}

                           clj-http/clj-http       {:mvn/version "3.13.0"}
                           http-kit/http-kit       {:mvn/version "2.8.0"}
                           cheshire/cheshire       {:mvn/version "5.13.0"}
                           org.clojure/data.json   {:mvn/version "2.5.0"}
                           metosin/jsonista        {:mvn/version "0.3.9"}

                           ;; interactive visualization
                           org.scicloj/kind-portal {:mvn/version "1-beta1"}
                           djblue/portal           {:mvn/version "0.56.0"}}}

  ;; BUILD with `clojure -T:build jar`
  ;; DEPLOY with `clojure -T:build deploy`
  :build    {:extra-paths ["dev"]
             :ns-default  build
             :extra-deps  {io.github.clojure/tools.build {:mvn/version "0.10.10"}
                           slipset/deps-deploy           {:mvn/version "0.2.2"}}}

  ;; LITERATE the documentation `clojure -X:dev:doc scicloj.clay.v2.api/make\!`
  :doc      {:extra-paths ["notebooks"]
             :main-opts   ["-m" "scicloj.clay.v2.api/make!"]
             :extra-deps  {org.scicloj/kindly                       {:mvn/version "4-beta5"}
                           org.scicloj/clay                         {:mvn/version "2-beta12"}
                           io.github.timothypratley/happyapi.google {:local/root "../happyapi.google"}}}

  ;; Run TESTS with `clojure -M:dev:test`
  :test     {:extra-paths ["test"]
             :main-opts   ["-m" "kaocha.runner"]
             :extra-deps  {lambdaisland/kaocha {:mvn/version "1.91.1392"}}}

  ;; FORMAT the code with `clojure -M:cljfmt`
  :cljfmt   {:main-opts  ["-m" "cljfmt.main"]
             :extra-deps {cljfmt/cljfmt {:mvn/version "0.9.2"}}}

  :codox    {:extra-deps {codox/codox {:mvn/version "0.10.8"}}
             :exec-fn    codox.main/generate-docs
             :exec-args  {:source-paths ["src"]}}

  ;; Update DEPENDENCIES with `clojure -M:outdated`
  :outdated {:deps      {com.github.liquidz/antq {:mvn/version "2.8.1201"}
                         org.slf4j/slf4j-nop     {:mvn/version "2.0.13"}}
             :main-opts ["-m" "antq.core" ":check-clojure-tools" "true" ":upgrade" "true"]}}}
